{"version":3,"sources":["webpack://blog/./spa/blog-admin/services/category/admin.ts","webpack://blog/./spa/blog-admin/components/category/edit-form.tsx","webpack://blog/./spa/blog-admin/containers/category/index.tsx","webpack://blog/./spa/blog-admin/services/sort/admin.ts"],"names":["getList","params","post","categoryApis","save","remove","lock","unlock","layout","labelCol","span","wrapperCol","memo","props","type","initialValues","visible","allSortList","onSave","onToggleEditorialPanel","restProps","form","Form","handleCancel","useCallback","resetFields","handleOk","validateFields","then","values","sort","commonValues","sortId","key","id","catch","error","message","editingFormData","useMemo","name","isEnable","label","undefined","destroyOnClose","title","onOk","onCancel","maskClosable","rules","required","labelInValue","map","value","style","marginBottom","inputSearchRef","useRef","useState","total","setTotal","selectedItems","setSelectedItems","current","pageSize","pagination","setPagination","tabKey","setTabKey","loading","setLoading","dataSource","setDataSource","setAllSortList","conditionQuery","setConditionQuery","filters","setFilters","editFormVisible","setEditFormVisible","editFormType","setEditFormType","editFormData","setEditFormData","showDataByDefaultWay","setValue","prevValue","handleSearch","trim","getAllSortList","adminSortServices","index","size","sortRes","data","list","handleSelectRows","keys","items","newItems","length","filter","selectedItem","every","item","some","handleTableChange","sorter","columnKey","order","orderBy","by","sortIdsArr","changeTab","handleItems","from","record","handlingItems","specificServices","adminCategoryServices","service","toggleEditorialPanel","editCateInSortPanel","saveData","callback","content","duration","Promise","race","err","getColumns","excludes","dataIndex","includes","text","filteredValue","render","val","moment","Date","format","filterMultiple","color","onClick","danger","marginLeft","Boolean","useEffect","res","tabComponent","activeKey","onChange","tab","actionBarComponent","align","xs","sm","md","lg","xl","icon","PlusOutlined","count","ReloadOutlined","DeleteOutlined","UnlockOutlined","LockOutlined","HomeOutlined","shape","ref","placeholder","onSearch","enterButton","allowClear","contentTableComponent","columns","rowKey","rowSelection","selectedRowKeys","showQuickJumper","showSizeChanger","expandable","expandedRowRender","formativeDataSource","categories","category","showHeader","editFormComponent","sortApis"],"mappings":"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","file":"blog-admin/js/chunks/546.js","sourcesContent":["import { post } from '@common/utils'\nimport { categoryApis } from '@blog-admin/services/apis'\nimport type { ServiceResult } from '@common/types'\nimport type { Category } from '@blog-admin/types'\n\nexport function getList(params: Partial<Category['getListParamsByAdminRole']> = {}): ServiceResult<Category['getListResByAdminRole']> {\n  return post<Category['getListResByAdminRole'], typeof params>(categoryApis.ADMIN_LIST, params)\n}\n\nexport function save(params: Category['editParams']): ServiceResult {\n  return post<never, typeof params>(categoryApis.ADMIN_SAVE, params)\n}\n\nexport function remove(params: Category['removeParams']): ServiceResult {\n  return post<never, typeof params>(categoryApis.ADMIN_DELETE, params)\n}\n\nexport function lock(params: Category['lockParams']): ServiceResult {\n  return post<never, typeof params>(categoryApis.ADMIN_LOCK, params)\n}\n\nexport function unlock(params: Category['unlockParams']): ServiceResult {\n  return post<never, typeof params>(categoryApis.ADMIN_UNLOCK, params)\n}\n","import React, { memo, useCallback, useMemo } from 'react'\nimport { Modal, Form, Input, Select, message } from 'antd'\nimport type { Sort, Category } from '@blog-admin/types'\nimport type { FC } from 'react'\nimport type { ModalProps } from 'antd/lib/modal'\nimport type { ToggleEditorialPanel, SaveData, ListItem } from '@blog-admin/containers/category'\n\ninterface EditFormProps extends ModalProps {\n  type: 'cate' | 'sort'\n  initialValues?: ListItem\n  allSortList: Sort['getListResByAdminRole']['list']\n  onSave: SaveData\n  onToggleEditorialPanel: ToggleEditorialPanel\n}\n\ntype FormDataWhenEdited = (Sort | Category)['formDataWhenEdited']\n\nconst layout = {\n  labelCol: { span: 5 },\n  wrapperCol: { span: 17 },\n}\n\nconst EditForm: FC<EditFormProps> = memo((props) => {\n  const { type, initialValues, visible, allSortList, onSave, onToggleEditorialPanel, ...restProps } = props\n  const [form] = Form.useForm<FormDataWhenEdited>()\n\n  const handleCancel = useCallback<ModalProps['onCancel']>(() => {\n    form.resetFields()\n    onToggleEditorialPanel()\n  }, [form, onToggleEditorialPanel])\n\n  const handleOk = useCallback<ModalProps['onOk']>(() => {\n    form\n      .validateFields()\n      .then((values) => {\n        const { sort, ...commonValues } = values as Category['formDataWhenEdited']\n        if (sort) (commonValues as Category['editParams']).sortId = sort.key\n        onSave({ id: initialValues?.id, ...commonValues } as (Category | Sort)['editParams'], () => {\n          form.resetFields()\n          onToggleEditorialPanel()\n        })\n      })\n      .catch((error) => {\n        message.error(error.message)\n      })\n  }, [form, initialValues, onSave, onToggleEditorialPanel])\n\n  const editingFormData = useMemo<FormDataWhenEdited>(() => {\n    const { name, isEnable = 1, sort } = (initialValues || {}) as Category['listItemByAdminRole']\n    const defaultValues = { isEnable, name } as FormDataWhenEdited\n    return { ...defaultValues, sort: sort ? { label: sort.name, key: sort.id } : undefined }\n  }, [initialValues])\n\n  return (\n    <Modal\n      destroyOnClose\n      title={initialValues?.id ? '更新' : '添加'}\n      visible={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      maskClosable={false}\n      {...restProps}\n    >\n      <Form {...layout} form={form} initialValues={editingFormData}>\n        <Form.Item label=\"名称\" name=\"name\" rules={[{ required: true, message: '请输入名称!' }]}>\n          <Input />\n        </Form.Item>\n        {type === 'cate' && (\n          <Form.Item label=\"所属\" name=\"sort\" rules={[{ required: true, message: '请选择状态!' }]}>\n            <Select labelInValue>\n              {allSortList.map((sort) => (\n                <Select.Option key={sort.id} value={sort.id}>\n                  {sort.name}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n        )}\n        <Form.Item label=\"状态\" name=\"isEnable\" rules={[{ required: true, message: '请选择状态!' }]} style={{ marginBottom: 0 }}>\n          <Select>\n            <Select.Option value={1}>可用</Select.Option>\n            <Select.Option value={0}>不可用</Select.Option>\n          </Select>\n        </Form.Item>\n      </Form>\n    </Modal>\n  )\n})\n\nexport default EditForm\n","import React, { memo, useCallback, useEffect, useState, useRef, useMemo } from 'react'\nimport { WrappedContainer } from '@common/components'\nimport { message, Table, Tabs, Button, Tag, Input, Row, Col, Tooltip, Badge } from 'antd'\nimport { UnlockOutlined, LockOutlined, DeleteOutlined, HomeOutlined, ReloadOutlined, PlusOutlined } from '@ant-design/icons'\nimport moment from 'moment'\nimport { adminCategoryServices } from '@blog-admin/services/category'\nimport { adminSortServices } from '@blog-admin/services/sort'\nimport EditForm from '@blog-admin/components/category/edit-form'\nimport type { FC, ReactNode } from 'react'\nimport type { RouteComponentProps } from 'react-router'\nimport type { Sort, Category } from '@blog-admin/types'\nimport type { TableProps } from 'antd/lib/table'\nimport type { SorterResult } from 'antd/lib/table/interface'\nimport type { TabsProps } from 'antd/lib/tabs'\nimport type { SearchProps } from 'antd/lib/input/Search'\n\nexport type ListItem = (Sort | Category)['listItemByAdminRole']\nexport type ToggleEditorialPanel = (editCateInSortPanel?: boolean, record?: ListItem) => void\nexport type SaveData = (params: (Sort | Category)['editParams'], callback?: () => void) => void\ntype TabKey = 'cate' | 'sort'\ntype GetColumns = <T = unknown>(type: TabKey, excludes?: string[]) => TableProps<T>['columns']\ntype HandleItems = (type: 'remove' | 'lock' | 'unlock', from?: TabKey, record?: ListItem) => void\n\nconst CategoryManagement: FC<RouteComponentProps> = memo(() => {\n  const inputSearchRef = useRef<Input>(null)\n  const [total, setTotal] = useState<number>(0)\n  const [selectedItems, setSelectedItems] = useState<ListItem[]>([])\n  const [pagination, setPagination] = useState<{ current: number; pageSize: number }>({ current: 1, pageSize: 10 })\n  const [tabKey, setTabKey] = useState<TabKey>('sort')\n  const [loading, setLoading] = useState<boolean>(false)\n  const [dataSource, setDataSource] = useState<ListItem[]>([])\n  const [allSortList, setAllSortList] = useState<Sort['getListResByAdminRole']['list']>([])\n  const [conditionQuery, setConditionQuery] = useState<Partial<(Sort | Category)['getListParamsByAdminRole']['conditionQuery']>>({})\n  const [filters, setFilters] = useState<Partial<{ sort: number[]; isEnable: number[] }>>({})\n  const [editFormVisible, setEditFormVisible] = useState<boolean>(false)\n  const [editFormType, setEditFormType] = useState<TabKey>('sort')\n  const [editFormData, setEditFormData] = useState<ListItem>(null)\n\n  const showDataByDefaultWay = useCallback<(event: React.MouseEvent<HTMLElement, MouseEvent>) => void>(() => {\n    setConditionQuery({})\n    setFilters({})\n    inputSearchRef.current?.setValue?.('')\n    setPagination((prevValue) => ({ ...prevValue, current: 1 }))\n  }, [])\n\n  const handleSearch = useCallback<SearchProps['onSearch']>((value) => {\n    setPagination((prevValue) => ({ ...prevValue, current: 1 }))\n    setConditionQuery((prevValue) => ({ ...prevValue, name: value.trim() }))\n  }, [])\n\n  const getAllSortList = useCallback<() => void>(async () => {\n    const [sortRes] = await adminSortServices.getList({ index: 1, size: 999 })\n    setAllSortList(sortRes?.data?.list || [])\n  }, [])\n\n  const handleSelectRows = useCallback<TableProps<ListItem>['rowSelection']['onChange']>(\n    (keys, items) => {\n      let newItems = []\n      if (selectedItems.length === keys.length) {\n        newItems = items\n      } else if (selectedItems.length < keys.length) {\n        newItems = [...selectedItems.filter((selectedItem) => items.every((item) => selectedItem.id !== item.id)), ...items]\n      } else {\n        newItems = selectedItems.filter((selectedItem) => keys.some((key) => key === selectedItem.id))\n      }\n      setSelectedItems(newItems)\n    },\n    [selectedItems],\n  )\n\n  const handleTableChange = useCallback<TableProps<ListItem>['onChange']>((pagination, filters, sorter) => {\n    setPagination({ current: pagination.current, pageSize: pagination.pageSize })\n    const { columnKey, order } = sorter as SorterResult<ListItem>\n    const orderBy = order ? { name: columnKey, by: order === 'descend' ? 'DESC' : 'ASC' } : {}\n    const isEnable = filters?.isEnable?.[0] as 0 | 1\n    const sortIdsArr = (filters?.sort as number[]) || []\n    setFilters(filters)\n    setConditionQuery((prevValue) => ({ ...prevValue, orderBy, isEnable, sortIdsArr } as typeof conditionQuery))\n  }, [])\n\n  const changeTab = useCallback<TabsProps['onChange']>((key) => {\n    setPagination((prevValue) => ({ ...prevValue, current: 1 }))\n    setDataSource([])\n    setSelectedItems([])\n    setFilters({})\n    setConditionQuery({})\n    setTabKey(key as TabKey)\n    setEditFormType(key as TabKey)\n    inputSearchRef.current?.setValue?.('')\n  }, [])\n\n  const handleItems = useCallback<HandleItems>(\n    async (type, from = tabKey, record) => {\n      const handlingItems = (record ? [record] : selectedItems).map((item) => ({ id: item.id, name: item.name }))\n      const specificServices = from === 'sort' ? adminSortServices : adminCategoryServices\n      // const [, err] = await specificServices[type]({ items: handlingItems }) // 绕过ts检测，不推荐\n      let service: typeof adminSortServices.remove\n      switch (type) {\n        case 'remove':\n          service = specificServices.remove\n          break\n        case 'lock':\n          service = specificServices.lock\n          break\n        case 'unlock':\n          service = specificServices.unlock\n          break\n        default:\n          break\n      }\n      const [, err] = await service({ items: handlingItems })\n      if (err) {\n        message.error('操作失败')\n        return\n      }\n      message.success('操作成功')\n      setSelectedItems([])\n      setPagination((prevValue) => ({ ...prevValue, current: 1 }))\n      if (from === 'sort') getAllSortList()\n    },\n    [selectedItems, tabKey, getAllSortList],\n  )\n\n  const toggleEditorialPanel = useCallback<ToggleEditorialPanel>(\n    (editCateInSortPanel, record) => {\n      setEditFormData(record)\n      setEditFormType(editCateInSortPanel ? 'cate' : tabKey)\n      setEditFormVisible((prevValue) => !prevValue)\n    },\n    [tabKey],\n  )\n\n  const saveData = useCallback<SaveData>(\n    (params, callback) => {\n      message.loading({ content: '正在提交...', key: 'saveData', duration: 0 })\n      Promise.race(\n        editFormType === 'sort'\n          ? [adminSortServices.save(params as Sort['editParams'])]\n          : [adminCategoryServices.save(params as Category['editParams'])],\n      )\n        .then(([, err]) => {\n          if (err) throw err\n          setPagination((prevValue) => ({ ...prevValue, current: 1 }))\n          message.success({ content: '操作成功', key: 'saveData' })\n          if (callback) callback()\n          if (editFormType === 'sort') getAllSortList()\n        })\n        .catch((error) => {\n          message.error({ content: error.message || '提交失败', key: 'saveData' })\n        })\n    },\n    [editFormType, getAllSortList],\n  )\n\n  const getColumns = useCallback<GetColumns>(\n    (type, excludes) => {\n      return [\n        {\n          title: '名称',\n          dataIndex: 'name',\n          key: 'name',\n          sorter: true,\n        },\n        type === 'cate' &&\n          !excludes?.includes?.('sort') && {\n            title: '所属',\n            dataIndex: 'sort',\n            key: 'sort',\n            sorter: true,\n            filters: allSortList.map((sort) => ({ text: sort.name, value: sort.id })),\n            filteredValue: filters?.sort || [],\n            render: (val) => val?.name,\n          },\n        {\n          title: '创建时间',\n          dataIndex: 'createDate',\n          key: 'createDate',\n          sorter: true,\n          render: (val) => moment(new Date(val)).format('YYYY-MM-DD'),\n        },\n        {\n          title: '修改时间',\n          dataIndex: 'updateDate',\n          key: 'updateDate',\n          sorter: true,\n          render: (val) => moment(new Date(val)).format('YYYY-MM-DD'),\n        },\n        {\n          title: '状态',\n          dataIndex: 'isEnable',\n          key: 'isEnable',\n          sorter: true,\n          filters: [\n            { text: '不可用', value: 0 },\n            { text: '可用', value: 1 },\n          ],\n          filterMultiple: false,\n          filteredValue: filters?.isEnable || [],\n          render: (val) => <Tag color={val === 1 ? 'blue' : 'gray'}>{val === 1 ? '可用' : '不可用'}</Tag>,\n        },\n        {\n          title: '操作',\n          key: 'action',\n          render: (record) => (\n            <>\n              <Button\n                size=\"small\"\n                type=\"primary\"\n                onClick={() => {\n                  toggleEditorialPanel(type !== tabKey, record)\n                }}\n              >\n                编辑\n              </Button>\n              <Button\n                size=\"small\"\n                danger\n                type=\"primary\"\n                onClick={() => {\n                  handleItems('remove', type, record)\n                }}\n                style={{ marginLeft: 10 }}\n              >\n                删除\n              </Button>\n              <Button\n                size=\"small\"\n                type=\"primary\"\n                onClick={() => {\n                  handleItems(record.isEnable ? 'lock' : 'unlock', type, record)\n                }}\n                style={{ marginLeft: 10 }}\n              >\n                {record.isEnable ? '禁用' : '启用'}\n              </Button>\n            </>\n          ),\n        },\n      ].filter(Boolean)\n    },\n    [tabKey, allSortList, filters, toggleEditorialPanel, handleItems],\n  )\n\n  useEffect(() => {\n    setLoading(true)\n    const params = { index: pagination.current, size: pagination.pageSize, conditionQuery }\n    Promise.race(\n      tabKey === 'sort'\n        ? [adminSortServices.getList(params as Partial<Sort['getListParamsByAdminRole']>)]\n        : [adminCategoryServices.getList(params as Partial<Category['getListParamsByAdminRole']>)],\n    )\n      .then(([res, err]) => {\n        if (err) throw err\n        setLoading(false)\n        setTotal(res.data.total)\n        setDataSource(res.data.list)\n      })\n      .catch((error) => {\n        message.error(error.message || '获取分类失败')\n      })\n  }, [tabKey, conditionQuery, pagination])\n\n  useEffect(() => {\n    getAllSortList()\n  }, [getAllSortList])\n\n  const tabComponent = useMemo<ReactNode>(() => {\n    return (\n      <Tabs activeKey={tabKey} onChange={changeTab}>\n        <Tabs.TabPane tab=\"一级分类\" key=\"sort\" />\n        <Tabs.TabPane tab=\"二级分类\" key=\"cate\" />\n      </Tabs>\n    )\n  }, [tabKey, changeTab])\n\n  const actionBarComponent = useMemo<ReactNode>(() => {\n    return (\n      <Row align=\"middle\" style={{ marginBottom: 15 }}>\n        <Col xs={12} sm={13} md={15} lg={16} xl={17}>\n          <Button\n            icon={<PlusOutlined />}\n            type=\"primary\"\n            size=\"small\"\n            onClick={() => {\n              toggleEditorialPanel()\n            }}\n          >\n            新增\n          </Button>\n          {tabKey === 'sort' && (\n            <Button\n              icon={<PlusOutlined />}\n              type=\"primary\"\n              size=\"small\"\n              style={{ marginLeft: 10 }}\n              onClick={() => {\n                toggleEditorialPanel(true)\n              }}\n            >\n              新增子分类\n            </Button>\n          )}\n          {selectedItems.length > 0 && (\n            <>\n              <Badge count={selectedItems.length} title=\"已选项数\">\n                <Button\n                  icon={<ReloadOutlined />}\n                  type=\"primary\"\n                  size=\"small\"\n                  onClick={() => {\n                    setSelectedItems([])\n                  }}\n                  style={{ marginLeft: 10 }}\n                >\n                  清空\n                </Button>\n              </Badge>\n              <Button\n                icon={<DeleteOutlined />}\n                type=\"primary\"\n                danger\n                size=\"small\"\n                onClick={() => {\n                  handleItems('remove')\n                }}\n                style={{ marginLeft: 10 }}\n              >\n                删除\n              </Button>\n              <Button\n                icon={<UnlockOutlined />}\n                type=\"primary\"\n                size=\"small\"\n                onClick={() => {\n                  handleItems('unlock')\n                }}\n                style={{ marginLeft: 10 }}\n              >\n                启用\n              </Button>\n              <Button\n                icon={<LockOutlined />}\n                type=\"primary\"\n                size=\"small\"\n                onClick={() => {\n                  handleItems('lock')\n                }}\n                style={{ marginLeft: 10 }}\n              >\n                禁用\n              </Button>\n            </>\n          )}\n        </Col>\n        <Col xs={2} sm={2} md={1} lg={1} xl={1}>\n          <Tooltip title=\"默认展示\">\n            <Button type=\"primary\" icon={<HomeOutlined />} shape=\"circle\" size=\"small\" onClick={showDataByDefaultWay} />\n          </Tooltip>\n        </Col>\n        <Col xs={10} sm={9} md={8} lg={7} xl={6}>\n          <Input.Search ref={inputSearchRef} placeholder=\"Enter something\" onSearch={handleSearch} enterButton allowClear />\n        </Col>\n      </Row>\n    )\n  }, [tabKey, selectedItems, toggleEditorialPanel, handleItems, handleSearch, showDataByDefaultWay])\n\n  const contentTableComponent = useMemo<ReactNode>(() => {\n    return (\n      <Table<ListItem>\n        columns={getColumns<ListItem>(tabKey)}\n        rowKey=\"id\"\n        onChange={handleTableChange}\n        rowSelection={{ selectedRowKeys: selectedItems.map((item) => item.id), onChange: handleSelectRows }}\n        loading={loading}\n        dataSource={dataSource}\n        pagination={{\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total,\n          ...pagination,\n        }}\n        expandable={\n          tabKey === 'sort' && {\n            expandedRowRender: (record: Sort['listItemByAdminRole']) => {\n              const formativeDataSource = record?.categories?.map?.((category) => {\n                return { ...category, sort: { ...record, categories: undefined } }\n              })\n              return (\n                <Table<Category['listItemByAdminRole']>\n                  columns={getColumns<Category['listItemByAdminRole']>('cate', ['sort'])}\n                  rowKey=\"id\"\n                  loading={loading}\n                  dataSource={formativeDataSource || []}\n                  pagination={false}\n                  showHeader={false}\n                />\n              )\n            },\n          }\n        }\n      />\n    )\n  }, [tabKey, total, selectedItems, loading, dataSource, pagination, getColumns, handleTableChange, handleSelectRows])\n\n  const editFormComponent = useMemo<ReactNode>(() => {\n    if (!editFormVisible) return null\n    return (\n      <EditForm\n        type={editFormType}\n        visible={editFormVisible}\n        initialValues={editFormData}\n        allSortList={allSortList.filter((sort) => Boolean(sort.isEnable))}\n        onToggleEditorialPanel={toggleEditorialPanel}\n        onSave={saveData}\n      />\n    )\n  }, [editFormVisible, editFormType, editFormData, allSortList, toggleEditorialPanel, saveData])\n\n  return (\n    <WrappedContainer>\n      {tabComponent}\n      {actionBarComponent}\n      {contentTableComponent}\n      {editFormComponent}\n    </WrappedContainer>\n  )\n})\n\nexport default CategoryManagement\n","import { post } from '@common/utils'\nimport { sortApis } from '@blog-admin/services/apis'\nimport type { ServiceResult } from '@common/types'\nimport type { Sort } from '@blog-admin/types'\n\nexport function getList(params: Partial<Sort['getListParamsByAdminRole']> = {}): ServiceResult<Sort['getListResByAdminRole']> {\n  return post<Sort['getListResByAdminRole'], typeof params>(sortApis.ADMIN_LIST, params)\n}\n\nexport function save(params: Sort['editParams']): ServiceResult {\n  return post<never, typeof params>(sortApis.ADMIN_SAVE, params)\n}\n\nexport function remove(params: Sort['removeParams']): ServiceResult {\n  return post<never, typeof params>(sortApis.ADMIN_DELETE, params)\n}\n\nexport function lock(params: Sort['lockParams']): ServiceResult {\n  return post<never, typeof params>(sortApis.ADMIN_LOCK, params)\n}\n\nexport function unlock(params: Sort['unlockParams']): ServiceResult {\n  return post<never, typeof params>(sortApis.ADMIN_UNLOCK, params)\n}\n"],"sourceRoot":""}