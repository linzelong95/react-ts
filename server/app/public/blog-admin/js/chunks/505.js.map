{"version":3,"sources":["webpack://blog/./spa/blog-admin/components/tag/edit-form.tsx","webpack://blog/./spa/blog-admin/containers/tag/index.tsx","webpack://blog/./spa/blog-admin/services/sort/admin.ts"],"names":["memo","props","initialValues","visible","allSortList","onSave","onToggleEditorialPanel","restProps","form","Form","handleCancel","useCallback","resetFields","handleOk","validateFields","then","values","sort","commonValues","id","sortId","key","catch","error","message","editingFormData","useMemo","name","isEnable","label","undefined","destroyOnClose","title","onOk","onCancel","maskClosable","labelCol","span","wrapperCol","rules","required","labelInValue","map","value","style","marginBottom","inputSearchRef","useRef","useState","selectedItems","setSelectedItems","current","pageSize","pagination","setPagination","setAllSortList","conditionQuery","setConditionQuery","filters","setFilters","editFormVisible","setEditFormVisible","editFormData","setEditFormData","getListParams","index","size","useService","adminTagServices","loading","tagRes","tagErr","forceRequest","data","total","list","dataSource","showDataByDefaultWay","setValue","prevValue","handleSearch","trim","handleSelectRows","keys","items","newItems","length","filter","selectedItem","every","item","some","handleTableChange","sorter","columnKey","order","orderBy","by","sortIdsArr","handleItems","type","record","handlingItems","toggleEditorialPanel","saveData","params","callback","content","duration","saveErr","useEffect","adminSortServices","sortRes","actionBarComponent","align","xs","sm","md","lg","xl","icon","PlusOutlined","onClick","count","ReloadOutlined","marginLeft","DeleteOutlined","danger","UnlockOutlined","LockOutlined","HomeOutlined","shape","ref","placeholder","onSearch","enterButton","allowClear","contentTableComponent","columns","dataIndex","text","filteredValue","render","val","moment","Date","format","filterMultiple","color","rowKey","onChange","rowSelection","selectedRowKeys","showQuickJumper","showSizeChanger","editFormComponent","Boolean","getList","post","sortApis","save","remove","lock","unlock"],"mappings":"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","file":"blog-admin/js/chunks/505.js","sourcesContent":["import React, { memo, useCallback, useMemo } from 'react'\nimport { Modal, Form, Input, Select, message } from 'antd'\nimport type { Sort, TagTypeCollection } from '@blog-admin/types'\nimport type { FC } from 'react'\nimport type { ModalProps } from 'antd/lib/modal'\nimport type { ToggleEditorialPanel, SaveData, ListItem } from '@blog-admin/containers/tag'\n\ninterface EditFormProps extends ModalProps {\n  initialValues?: ListItem\n  allSortList: Sort['getListResByAdminRole']['list']\n  onSave: SaveData\n  onToggleEditorialPanel: ToggleEditorialPanel\n}\n\ntype FormDataWhenEdited = TagTypeCollection['formDataWhenEdited']\n\nconst EditForm: FC<EditFormProps> = memo((props) => {\n  const { initialValues, visible, allSortList, onSave, onToggleEditorialPanel, ...restProps } = props\n  const [form] = Form.useForm<FormDataWhenEdited>()\n\n  const handleCancel = useCallback<ModalProps['onCancel']>(() => {\n    form.resetFields()\n    onToggleEditorialPanel()\n  }, [form, onToggleEditorialPanel])\n\n  const handleOk = useCallback<ModalProps['onOk']>(() => {\n    form\n      .validateFields()\n      .then((values) => {\n        const { sort, ...commonValues } = values\n        onSave({ id: initialValues?.id, sortId: sort.key, ...commonValues }, () => {\n          form.resetFields()\n          onToggleEditorialPanel()\n        })\n      })\n      .catch((error) => {\n        message.error(error.message)\n      })\n  }, [form, initialValues, onSave, onToggleEditorialPanel])\n\n  const editingFormData = useMemo<FormDataWhenEdited>(() => {\n    const { name, isEnable = 1, sort } = initialValues || {}\n    const defaultValues = { isEnable, name } as FormDataWhenEdited\n    return { ...defaultValues, sort: sort ? { label: sort.name, key: sort.id } : undefined }\n  }, [initialValues])\n\n  return (\n    <Modal\n      destroyOnClose\n      title={initialValues?.id ? '更新' : '添加'}\n      visible={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      maskClosable={false}\n      {...restProps}\n    >\n      <Form labelCol={{ span: 5 }} wrapperCol={{ span: 17 }} form={form} initialValues={editingFormData}>\n        <Form.Item label=\"名称\" name=\"name\" rules={[{ required: true, message: '请输入名称!' }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"所属\" name=\"sort\" rules={[{ required: true, message: '请选择状态!' }]}>\n          <Select labelInValue>\n            {allSortList.map((sort) => (\n              <Select.Option key={sort.id} value={sort.id}>\n                {sort.name}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"状态\" name=\"isEnable\" rules={[{ required: true, message: '请选择状态!' }]} style={{ marginBottom: 0 }}>\n          <Select>\n            <Select.Option value={1}>可用</Select.Option>\n            <Select.Option value={0}>不可用</Select.Option>\n          </Select>\n        </Form.Item>\n      </Form>\n    </Modal>\n  )\n})\n\nexport default EditForm\n","import React, { memo, useCallback, useState, useRef, useMemo, useEffect } from 'react'\nimport { WrappedContainer } from '@common/components'\nimport { useService } from '@common/hooks'\nimport { message, Table, Button, Tag, Input, Row, Col, Tooltip, Badge } from 'antd'\nimport { UnlockOutlined, LockOutlined, DeleteOutlined, HomeOutlined, ReloadOutlined, PlusOutlined } from '@ant-design/icons'\nimport moment from 'moment'\nimport { adminSortServices } from '@blog-admin/services/sort'\nimport { adminTagServices } from '@blog-admin/services/tag'\nimport EditForm from '@blog-admin/components/tag/edit-form'\nimport type { FC, ReactNode } from 'react'\nimport type { RouteComponentProps } from 'react-router'\nimport type { TagTypeCollection, Sort } from '@blog-admin/types'\nimport type { TableProps } from 'antd/lib/table'\nimport type { SorterResult } from 'antd/lib/table/interface'\nimport type { SearchProps } from 'antd/lib/input/Search'\n\nexport type ListItem = TagTypeCollection['listItemByAdminRole']\nexport type ToggleEditorialPanel = (record?: ListItem) => void\nexport type SaveData = (params: TagTypeCollection['editParams'], callback?: () => void) => void\ntype HandleItems = (type: 'remove' | 'lock' | 'unlock', record?: ListItem) => void\n\nconst TagManagement: FC<RouteComponentProps> = memo(() => {\n  const inputSearchRef = useRef<Input>(null)\n  const [selectedItems, setSelectedItems] = useState<ListItem[]>([])\n  const [pagination, setPagination] = useState<{ current: number; pageSize: number }>({ current: 1, pageSize: 10 })\n  const [allSortList, setAllSortList] = useState<Sort['getListResByAdminRole']['list']>([])\n  const [conditionQuery, setConditionQuery] = useState<TagTypeCollection['getListParamsByAdminRole']['conditionQuery']>({})\n  const [filters, setFilters] = useState<Partial<{ sort: number[]; isEnable: number[] }>>({})\n  const [editFormVisible, setEditFormVisible] = useState<boolean>(false)\n  const [editFormData, setEditFormData] = useState<ListItem>(null)\n  const getListParams = useMemo<TagTypeCollection['getListParamsByAdminRole']>(\n    () => ({\n      index: pagination.current,\n      size: pagination.pageSize,\n      conditionQuery,\n    }),\n    [pagination, conditionQuery],\n  )\n\n  const [loading, tagRes, tagErr, forceRequest] = useService(adminTagServices.getList, getListParams)\n  const [total, dataSource] = useMemo(() => {\n    if (tagErr) {\n      message.error(tagErr.message || '获取列表失败')\n      return [0, []]\n    }\n    return [tagRes?.data?.total || 0, tagRes?.data?.list || []]\n  }, [tagRes, tagErr])\n\n  const showDataByDefaultWay = useCallback<(event: React.MouseEvent<HTMLElement, MouseEvent>) => void>(() => {\n    setConditionQuery({})\n    setFilters({})\n    inputSearchRef.current?.setValue?.('')\n    setPagination((prevValue) => ({ ...prevValue, current: 1 }))\n  }, [])\n\n  const handleSearch = useCallback<SearchProps['onSearch']>((value) => {\n    setPagination((prevValue) => ({ ...prevValue, current: 1 }))\n    setConditionQuery((prevValue) => ({ ...prevValue, name: value.trim() }))\n  }, [])\n\n  const handleSelectRows = useCallback<TableProps<ListItem>['rowSelection']['onChange']>(\n    (keys, items) => {\n      let newItems = []\n      if (selectedItems.length === keys.length) {\n        newItems = items\n      } else if (selectedItems.length < keys.length) {\n        newItems = [...selectedItems.filter((selectedItem) => items.every((item) => selectedItem.id !== item.id)), ...items]\n      } else {\n        newItems = selectedItems.filter((selectedItem) => keys.some((key) => key === selectedItem.id))\n      }\n      setSelectedItems(newItems)\n    },\n    [selectedItems],\n  )\n\n  const handleTableChange = useCallback<TableProps<ListItem>['onChange']>((pagination, filters, sorter) => {\n    setPagination({ current: pagination.current, pageSize: pagination.pageSize })\n    const { columnKey, order } = sorter as SorterResult<ListItem>\n    const orderBy = order ? { name: columnKey, by: order === 'descend' ? 'DESC' : 'ASC' } : {}\n    const isEnable = filters?.isEnable?.[0] as 0 | 1\n    const sortIdsArr = (filters?.sort as number[]) || []\n    setFilters(filters)\n    setConditionQuery((prevValue) => ({ ...prevValue, orderBy, isEnable, sortIdsArr } as typeof conditionQuery))\n  }, [])\n\n  const handleItems = useCallback<HandleItems>(\n    async (type, record) => {\n      const handlingItems = (record ? [record] : selectedItems).map((item) => ({ id: item.id, name: item.name }))\n      const [, err] = await adminTagServices[type]({ items: handlingItems })\n      if (err) {\n        message.error('操作失败')\n        return\n      }\n      message.success('操作成功')\n      setSelectedItems([])\n      const { current } = pagination\n      if (type === 'remove' && handlingItems?.length > dataSource?.length) {\n        setPagination((prevValue) => ({ ...prevValue, current: current - 1 || 0 }))\n      } else {\n        forceRequest()\n      }\n    },\n    [pagination, selectedItems, dataSource, forceRequest],\n  )\n\n  const toggleEditorialPanel = useCallback<ToggleEditorialPanel>((record) => {\n    setEditFormData(record)\n    setEditFormVisible((prevValue) => !prevValue)\n  }, [])\n\n  const saveData = useCallback<SaveData>(\n    async (params, callback) => {\n      message.loading({ content: '正在提交...', key: 'saveData', duration: 0 })\n      const [, saveErr] = await adminTagServices.save(params)\n      if (saveErr) {\n        message.error({ content: saveErr.message || '提交失败', key: 'saveData' })\n        return\n      }\n      if (callback) callback()\n      const { pageSize, current } = pagination\n      if (!params.id && dataSource?.length === pageSize) {\n        setPagination((prevValue) => ({ ...prevValue, current: current + 1 }))\n      } else {\n        forceRequest()\n      }\n      message.success({ content: '操作成功', key: 'saveData' })\n    },\n    [dataSource, pagination, forceRequest],\n  )\n\n  useEffect(() => {\n    ;(async () => {\n      const [sortRes] = await adminSortServices.getList({ index: 1, size: 999 })\n      setAllSortList(sortRes?.data?.list || [])\n    })()\n  }, [])\n\n  const actionBarComponent = useMemo<ReactNode>(() => {\n    return (\n      <Row align=\"middle\" style={{ marginBottom: 15 }}>\n        <Col xs={12} sm={13} md={15} lg={16} xl={17}>\n          <Button\n            icon={<PlusOutlined />}\n            type=\"primary\"\n            size=\"small\"\n            onClick={() => {\n              toggleEditorialPanel()\n            }}\n          >\n            新增\n          </Button>\n          {selectedItems?.length > 0 && (\n            <>\n              <Badge count={selectedItems.length} title=\"已选项数\">\n                <Button\n                  icon={<ReloadOutlined />}\n                  type=\"primary\"\n                  size=\"small\"\n                  onClick={() => {\n                    setSelectedItems([])\n                  }}\n                  style={{ marginLeft: 10 }}\n                >\n                  清空\n                </Button>\n              </Badge>\n              <Button\n                icon={<DeleteOutlined />}\n                type=\"primary\"\n                danger\n                size=\"small\"\n                onClick={() => {\n                  handleItems('remove')\n                }}\n                style={{ marginLeft: 10 }}\n              >\n                删除\n              </Button>\n              <Button\n                icon={<UnlockOutlined />}\n                type=\"primary\"\n                size=\"small\"\n                onClick={() => {\n                  handleItems('unlock')\n                }}\n                style={{ marginLeft: 10 }}\n              >\n                启用\n              </Button>\n              <Button\n                icon={<LockOutlined />}\n                type=\"primary\"\n                size=\"small\"\n                onClick={() => {\n                  handleItems('lock')\n                }}\n                style={{ marginLeft: 10 }}\n              >\n                禁用\n              </Button>\n            </>\n          )}\n        </Col>\n        <Col xs={2} sm={2} md={1} lg={1} xl={1}>\n          <Tooltip title=\"默认展示\">\n            <Button type=\"primary\" icon={<HomeOutlined />} shape=\"circle\" size=\"small\" onClick={showDataByDefaultWay} />\n          </Tooltip>\n        </Col>\n        <Col xs={10} sm={9} md={8} lg={7} xl={6}>\n          <Input.Search ref={inputSearchRef} placeholder=\"Enter something\" onSearch={handleSearch} enterButton allowClear />\n        </Col>\n      </Row>\n    )\n  }, [selectedItems, toggleEditorialPanel, handleItems, handleSearch, showDataByDefaultWay])\n\n  const contentTableComponent = useMemo<ReactNode>(() => {\n    return (\n      <Table<ListItem>\n        columns={[\n          {\n            title: '名称',\n            dataIndex: 'name',\n            key: 'name',\n            sorter: true,\n          },\n          {\n            title: '所属',\n            dataIndex: 'sort',\n            key: 'sort',\n            sorter: true,\n            filters: allSortList.map((sort) => ({ text: sort.name, value: sort.id })),\n            filteredValue: filters?.sort || [],\n            render: (val) => val?.name,\n          },\n          {\n            title: '创建时间',\n            dataIndex: 'createDate',\n            key: 'createDate',\n            sorter: true,\n            render: (val) => moment(new Date(val)).format('YYYY-MM-DD'),\n          },\n          {\n            title: '修改时间',\n            dataIndex: 'updateDate',\n            key: 'updateDate',\n            sorter: true,\n            render: (val) => moment(new Date(val)).format('YYYY-MM-DD'),\n          },\n          {\n            title: '状态',\n            dataIndex: 'isEnable',\n            key: 'isEnable',\n            sorter: true,\n            filters: [\n              { text: '不可用', value: 0 },\n              { text: '可用', value: 1 },\n            ],\n            filterMultiple: false,\n            filteredValue: filters?.isEnable || [],\n            render: (val) => <Tag color={val === 1 ? 'blue' : 'gray'}>{val === 1 ? '可用' : '不可用'}</Tag>,\n          },\n          {\n            title: '操作',\n            key: 'action',\n            render: (record) => (\n              <>\n                <Button\n                  size=\"small\"\n                  type=\"primary\"\n                  onClick={() => {\n                    toggleEditorialPanel(record)\n                  }}\n                >\n                  编辑\n                </Button>\n                <Button\n                  size=\"small\"\n                  danger\n                  type=\"primary\"\n                  onClick={() => {\n                    handleItems('remove', record)\n                  }}\n                  style={{ marginLeft: 10 }}\n                >\n                  删除\n                </Button>\n                <Button\n                  size=\"small\"\n                  type=\"primary\"\n                  onClick={() => {\n                    handleItems(record.isEnable ? 'lock' : 'unlock', record)\n                  }}\n                  style={{ marginLeft: 10 }}\n                >\n                  {record.isEnable ? '禁用' : '启用'}\n                </Button>\n              </>\n            ),\n          },\n        ]}\n        rowKey=\"id\"\n        onChange={handleTableChange}\n        rowSelection={{ selectedRowKeys: selectedItems.map((item) => item.id), onChange: handleSelectRows }}\n        loading={loading}\n        dataSource={dataSource}\n        pagination={{\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total,\n          ...pagination,\n        }}\n      />\n    )\n  }, [\n    total,\n    allSortList,\n    filters,\n    selectedItems,\n    loading,\n    dataSource,\n    pagination,\n    handleTableChange,\n    handleSelectRows,\n    handleItems,\n    toggleEditorialPanel,\n  ])\n\n  const editFormComponent = useMemo<ReactNode>(() => {\n    if (!editFormVisible) return null\n    return (\n      <EditForm\n        visible={editFormVisible}\n        initialValues={editFormData}\n        allSortList={allSortList.filter((sort) => Boolean(sort.isEnable))}\n        onSave={saveData}\n        onToggleEditorialPanel={toggleEditorialPanel}\n      />\n    )\n  }, [editFormVisible, editFormData, allSortList, toggleEditorialPanel, saveData])\n\n  return (\n    <WrappedContainer>\n      {actionBarComponent}\n      {contentTableComponent}\n      {editFormComponent}\n    </WrappedContainer>\n  )\n})\n\nexport default TagManagement\n","import { post } from '@common/utils'\nimport { sortApis } from '@blog-admin/services/apis'\nimport type { ServiceResult } from '@common/types'\nimport type { Sort } from '@blog-admin/types'\n\nexport function getList(params: Partial<Sort['getListParamsByAdminRole']> = {}): ServiceResult<Sort['getListResByAdminRole']> {\n  return post<Sort['getListResByAdminRole'], typeof params>(sortApis.ADMIN_LIST, params)\n}\n\nexport function save(params: Sort['editParams']): ServiceResult {\n  return post<never, typeof params>(sortApis.ADMIN_SAVE, params)\n}\n\nexport function remove(params: Sort['removeParams']): ServiceResult {\n  return post<never, typeof params>(sortApis.ADMIN_DELETE, params)\n}\n\nexport function lock(params: Sort['lockParams']): ServiceResult {\n  return post<never, typeof params>(sortApis.ADMIN_LOCK, params)\n}\n\nexport function unlock(params: Sort['unlockParams']): ServiceResult {\n  return post<never, typeof params>(sortApis.ADMIN_UNLOCK, params)\n}\n"],"sourceRoot":""}